import { useEffect, useState, useMemo } from 'react';
import { supabase } from './supabaseClient';
import { ThemeProvider } from './components/ThemeProvider';
import { ThemeToggle } from './components/ThemeToggle';
import { Search, X } from 'lucide-react';
import { Toast } from './components/Toast';
import { createBrowserRouter, RouterProvider, Navigate, Route, createRoutesFromElements, Link } from 'react-router-dom';
import PatientConsultation from './components/PatientConsultation';

// 환자 설문 데이터 타입 정의
interface PatientQuestionnaire {
  id?: number;
  created_at: string;
  
  // 폼 공통
  at_clinic: boolean;
  consent: boolean;
  name: string;
  resident_id: string;
  gender: string;
  phone: string;
  address: string;

  // 사보험 관련
  has_private_insurance: boolean;
  private_insurance_period: string;
  insurance_company: string;

  // 긴급연락처
  emergency_contact_name: string;
  emergency_contact_relation: string;
  emergency_contact_phone: string;

  // 내원 정보
  visit_reason: string;
  treatment_area: string;
  referral_source: string;
  referrer_name: string;
  referrer_phone: string;
  referrer_birth_year: string;
  last_visit: string;

  // 복용 약물
  medications: string;
  other_medication: string;

  // 질환
  medical_conditions: string;
  other_condition: string;

  // 알레르기
  allergies: string;
  other_allergy: string;

  // 임신/수유
  pregnancy_status: string;
  pregnancy_week: string;

  // 흡연
  smoking_status: string;
  smoking_amount: string;

  // 치과 불안감
  dental_fears: string;

  // 기타
  additional_info: string;

  // 제출 시각
  submitted_at: string;
}

// 버튼식 복수 선택을 위한 컴포넌트
function MultiSelectButtons({
  label,
  name,
  options,
  selectedValues,
  onChange,
  className = ''
}: {
  label: string,
  name: string,
  options: { value: string, label: string }[],
  selectedValues: string[],
  onChange: (name: string, value: string[]) => void,
  className?: string
}) {
  const toggleOption = (value: string) => {
    if (value === "복용 약물 없음" || value === "해당사항 없음" || value === "알러지 없음") {
      // "없음" 옵션 선택 시 다른 모든 옵션 해제
      onChange(name, [value]);
      return;
    }

    let newSelected = [...selectedValues];
    
    // 이미 "없음" 옵션이 선택되어 있다면 해제
    if (
      (name === "medications" && selectedValues.includes("복용 약물 없음")) ||
      (name === "medical_conditions" && selectedValues.includes("해당사항 없음")) ||
      (name === "allergies" && selectedValues.includes("알러지 없음"))
    ) {
      newSelected = [];
    }
    
    if (newSelected.includes(value)) {
      // 이미 선택된 옵션이면 제거
      newSelected = newSelected.filter(item => item !== value);
    } else {
      // 선택되지 않은 옵션이면 추가
      newSelected.push(value);
    }
    
    onChange(name, newSelected);
  };
  
  return (
    <div className={`mb-4 ${className}`}>
      <label className="block mb-2 text-lg font-semibold">{label}</label>
      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
        {options.map(option => (
          <button
            key={option.value}
            type="button"
            className={`p-3 border rounded text-left ${
              selectedValues.includes(option.value)
                ? 'bg-blue-500 text-white border-blue-600'
                : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-100'
            }`}
            onClick={() => toggleOption(option.value)}
          >
            {option.label}
          </button>
        ))}
      </div>
    </div>
  );
}

// 모달 컴포넌트 - X 버튼에 title 속성 추가
function Modal({ isOpen, onClose, children }: { isOpen: boolean, onClose: () => void, children: React.ReactNode }) {
  if (!isOpen) return null;
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold">환자 정보 추가</h2>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-700" title="닫기">
            <X />
          </button>
        </div>
        {children}
      </div>
    </div>
  );
}

// 입력 필드 컴포넌트 확장
function InputField({ 
  label, 
  name, 
  value, 
  onChange, 
  type = 'text', 
  placeholder = '', 
  required = false,
  disabled = false,
  multiple = false,
  error = '',
  children
}: { 
  label: string, 
  name: string, 
  value: string | boolean, 
  onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => void, 
  type?: string,
  placeholder?: string,
  required?: boolean,
  disabled?: boolean,
  multiple?: boolean,
  error?: string,
  children?: React.ReactNode
}) {
  // 에러 여부 boolean 변환
  const hasError = error !== '';
  
  if (type === 'textarea') {
    return (
      <div className="mb-4">
        <label className="block mb-1">{label} {required && <span className="text-red-500">*</span>}</label>
        <textarea
          name={name}
          value={value as string}
          onChange={onChange}
          className={`w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 ${error ? 'border-red-500' : ''}`}
          placeholder={placeholder}
          required={required}
          disabled={disabled}
          aria-invalid={hasError}
          title={label}
        />
        {error && <p className="text-red-500 text-sm mt-1">{error}</p>}
      </div>
    );
  }
  
  if (type === 'checkbox') {
    return (
      <div className="mb-4 flex items-center">
        <input
          type="checkbox"
          name={name}
          checked={value as boolean}
          onChange={onChange}
          className="mr-2"
          required={required}
          disabled={disabled}
          title={label}
        />
        <label>{label} {required && <span className="text-red-500">*</span>}</label>
      </div>
    );
  }
  
  if (type === 'select') {
    return (
      <div className="mb-4">
        <label className="block mb-1">{label} {required && <span className="text-red-500">*</span>}</label>
        <select
          name={name}
          value={value as string}
          onChange={onChange}
          className={`w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 ${error ? 'border-red-500' : ''} ${multiple ? 'min-h-[200px]' : ''}`}
          required={required}
          disabled={disabled}
          multiple={multiple}
          aria-invalid={hasError}
          title={label}
          style={multiple ? { fontSize: '1.125rem' } : undefined}
        >
          {children}
        </select>
        {error && <p className="text-red-500 text-sm mt-1">{error}</p>}
      </div>
    );
  }
  
  return (
    <div className="mb-4">
      <label className="block mb-1">{label} {required && <span className="text-red-500">*</span>}</label>
      <input
        type={type}
        name={name}
        value={value as string}
        onChange={onChange}
        className={`w-full p-2 border rounded dark:bg-gray-700 dark:border-gray-600 ${error ? 'border-red-500' : ''}`}
        placeholder={placeholder}
        required={required}
        disabled={disabled}
        aria-invalid={hasError}
        title={label}
      />
      {error && <p className="text-red-500 text-sm mt-1">{error}</p>}
    </div>
  );
}

// 유효성 검사 함수들
// 주민등록번호 검증
const isValidResidentId = (value: string) => {
  const digits = value.replace('-', '');
  if (digits.length !== 13) return false;
  const multipliers = [2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5];
  let sum = 0;
  for (let i = 0; i < 12; i++) {
    sum += parseInt(digits[i], 10) * multipliers[i];
  }
  const remainder = (11 - (sum % 11)) % 10;
  const checkDigit = parseInt(digits[12], 10);
  return remainder === checkDigit;
};

// 한국 휴대폰 번호만 허용 (010,011,016,017,018,019)
const isValidKoreanPhoneNumber = (phone: string) => {
  const pattern = /^(010|011|016|017|018|019)-\d{3,4}-\d{4}$/;
  return pattern.test(phone);
};

// 날짜시각 포매팅 (YYYY-MM-DD HH:mm:ss)
const formatDateTime = (date: Date): string => {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const mins = String(date.getMinutes()).padStart(2, '0');
  const secs = String(date.getSeconds()).padStart(2, '0');
  return `${year}-${month}-${day} ${hours}:${mins}:${secs}`;
};

// 환자 정보 입력 폼 컴포넌트
function PatientForm({ onSubmit, onCancel }: { onSubmit: (data: PatientQuestionnaire) => void, onCancel: () => void }) {
  // 폼 데이터 구조 변경
  const initialFormData: PatientQuestionnaire = {
    id: undefined,
    created_at: new Date().toISOString(),
    at_clinic: true,
    consent: true,
    name: '',
    resident_id: '',
    gender: '',
    phone: '',
    address: '',
    has_private_insurance: false,
    private_insurance_period: '',
    insurance_company: '',
    emergency_contact_name: '',
    emergency_contact_relation: '',
    emergency_contact_phone: '',
    visit_reason: '',
    treatment_area: '',
    referral_source: '',
    referrer_name: '',
    referrer_phone: '',
    referrer_birth_year: '',
    last_visit: '',
    medications: '',
    other_medication: '',
    medical_conditions: '',
    other_condition: '',
    allergies: '',
    other_allergy: '',
    pregnancy_status: '',
    pregnancy_week: '',
    smoking_status: '',
    smoking_amount: '',
    dental_fears: '',
    additional_info: '',
    submitted_at: new Date().toISOString()
  };
  
  const [formData, setFormData] = useState<PatientQuestionnaire>(initialFormData);
  const [activeSection, setActiveSection] = useState<number>(0);
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});
  const [loading, setLoading] = useState(false);
  
  // 유효성 검사 실행하는 함수
  const validateField = (name: string, value: string | boolean): string => {
    switch(name) {
      case 'name':
        return value ? '' : '이름을 입력해주세요';
      case 'resident_id':
        if (!value) return '주민등록번호를 입력해주세요';
        return isValidResidentId(value as string) ? '' : '유효하지 않은 주민등록번호입니다';
      case 'phone':
        if (!value) return '전화번호를 입력해주세요';
        return isValidKoreanPhoneNumber(value as string) ? '' : '유효하지 않은 전화번호 형식입니다';
      case 'emergency_contact_phone':
        if (!value) return '';
        return isValidKoreanPhoneNumber(value as string) ? '' : '유효하지 않은 전화번호 형식입니다';
      case 'referrer_phone':
        if (!value) return '';
        return isValidKoreanPhoneNumber(value as string) ? '' : '유효하지 않은 전화번호 형식입니다';
      default:
        return '';
    }
  };
  
  // 입력값 변경 처리 (주민번호, 전화번호 특별 처리 포함)
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    
    // 체크박스 처리
    if (type === 'checkbox') {
      const checked = (e.target as HTMLInputElement).checked;
      setFormData(prev => ({
        ...prev,
        [name]: checked
      }));
      
      // 유효성 검사
      const error = validateField(name, checked);
      setValidationErrors(prev => ({
        ...prev,
        [name]: error
      }));
      return;
    }
    
    // 주민번호 입력 시 자동 하이픈 추가
    if (name === 'resident_id') {
      let formattedValue = value.replace(/[^0-9]/g, '');
      if (formattedValue.length > 6) {
        formattedValue = `${formattedValue.slice(0, 6)}-${formattedValue.slice(6, 13)}`;
      }
      
      setFormData(prev => ({
        ...prev,
        [name]: formattedValue,
        gender: formattedValue.length >= 8 ? formattedValue.charAt(7) >= '3' ? '남성' : '여성' : prev.gender
      }));
      
      // 유효성 검사
      const error = validateField(name, formattedValue);
      setValidationErrors(prev => ({
        ...prev,
        [name]: error
      }));
      return;
    }
    
    // 전화번호 입력 시 자동 하이픈 추가
    if (name === 'phone' || name === 'emergency_contact_phone' || name === 'referrer_phone') {
      let formattedValue = value.replace(/[^0-9]/g, '');
      if (formattedValue.length >= 10) {
        if (formattedValue.startsWith('02')) { // 서울 지역번호
          formattedValue = formattedValue.length <= 9 
            ? `${formattedValue.slice(0, 2)}-${formattedValue.slice(2, 5)}-${formattedValue.slice(5, 9)}`
            : `${formattedValue.slice(0, 2)}-${formattedValue.slice(2, 6)}-${formattedValue.slice(6, 10)}`;
        } else { // 휴대폰 번호 또는 기타 지역번호
          formattedValue = formattedValue.length === 10
            ? `${formattedValue.slice(0, 3)}-${formattedValue.slice(3, 6)}-${formattedValue.slice(6, 10)}`
            : `${formattedValue.slice(0, 3)}-${formattedValue.slice(3, 7)}-${formattedValue.slice(7, 11)}`;
        }
      }
      
      setFormData(prev => ({
        ...prev,
        [name]: formattedValue
      }));
      
      // 유효성 검사
      const error = validateField(name, formattedValue);
      setValidationErrors(prev => ({
        ...prev,
        [name]: error
      }));
      return;
    }
    
    // 일반 입력 처리
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // 유효성 검사
    const error = validateField(name, value);
    setValidationErrors(prev => ({
      ...prev,
      [name]: error
    }));
  };
  
  // 다중 선택을 위한 별도 핸들러 추가
  const handleMultiSelect = (name: string, selectedOptions: string[]) => {
    const value = selectedOptions.join(', ');
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  // 폼 제출 전 유효성 검사
  const validateForm = (): boolean => {
    const errors: Record<string, string> = {};
    
    // 필수 필드 검사
    if (!formData.name) errors.name = '이름을 입력해주세요';
    if (!formData.resident_id) errors.resident_id = '주민등록번호를 입력해주세요';
    else if (!isValidResidentId(formData.resident_id)) errors.resident_id = '유효하지 않은 주민등록번호입니다';
    
    if (!formData.phone) errors.phone = '전화번호를 입력해주세요';
    else if (!isValidKoreanPhoneNumber(formData.phone)) errors.phone = '유효하지 않은 전화번호 형식입니다';
    
    if (formData.emergency_contact_phone && !isValidKoreanPhoneNumber(formData.emergency_contact_phone)) {
      errors.emergency_contact_phone = '유효하지 않은 전화번호 형식입니다';
    }
    
    if (formData.referrer_phone && !isValidKoreanPhoneNumber(formData.referrer_phone)) {
      errors.referrer_phone = '유효하지 않은 전화번호 형식입니다';
    }
    
    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (validateForm()) {
      setLoading(true);
      
      // 제출 시간 추가
      const submittedData = {
        ...formData,
        submitted_at: formatDateTime(new Date())
      };
      
      onSubmit(submittedData);
    }
  };
  
  const sections = [
    {
      title: "기본 정보",
      fields: (
        <>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <InputField 
                label="이름" 
                name="name" 
                value={formData.name} 
                onChange={handleChange} 
                required 
                error={validationErrors.name}
              />
            </div>
            <div>
              <InputField 
                label="주민번호" 
                name="resident_id" 
                value={formData.resident_id} 
                onChange={handleChange} 
                placeholder="123456-1234567" 
                required 
                error={validationErrors.resident_id}
              />
            </div>
            <div>
              <InputField 
                label="성별" 
                name="gender" 
                value={formData.gender} 
                onChange={handleChange} 
                type="select"
              >
                <option value="">선택하세요</option>
                <option value="남성">남성</option>
                <option value="여성">여성</option>
              </InputField>
            </div>
            <div>
              <InputField 
                label="전화번호" 
                name="phone" 
                value={formData.phone} 
                onChange={handleChange} 
                placeholder="010-1234-5678" 
                required 
                error={validationErrors.phone}
              />
            </div>
            <div className="md:col-span-2">
              <InputField 
                label="주소" 
                name="address" 
                value={formData.address} 
                onChange={handleChange} 
                type="textarea"
              />
            </div>
            <div>
              <InputField 
                label="내원여부" 
                name="at_clinic" 
                value={formData.at_clinic} 
                onChange={handleChange} 
                type="checkbox"
              />
            </div>
            <div>
              <InputField 
                label="정보이용동의" 
                name="consent" 
                value={formData.consent} 
                onChange={handleChange} 
                type="checkbox" 
                required
              />
            </div>
          </div>
        </>
      )
    },
    {
      title: "내원 정보",
      fields: (
        <>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <InputField 
                label="내원목적" 
                name="visit_reason" 
                value={formData.visit_reason} 
                onChange={handleChange} 
                type="select"
              >
                <option value="">선택하세요</option>
                <option value="정기검진">정기검진</option>
                <option value="이가 아파요">이가 아파요</option>
                <option value="이가 시려요">이가 시려요</option>
                <option value="잇몸이 부었어요">잇몸이 부었어요</option>
                <option value="이빼러 왔어요">이빼러 왔어요</option>
                <option value="치아에 구멍이 난 것 같아요">치아에 구멍이 난 것 같아요</option>
                <option value="충치가 생긴 것 같아요">충치가 생긴 것 같아요</option>
                <option value="임플란트 상담">임플란트 상담</option>
                <option value="교정상담">교정상담</option>
                <option value="미백">미백</option>
                <option value="앞니성형">앞니성형</option>
                <option value="기타">기타</option>
              </InputField>
            </div>
            <div>
              <InputField 
                label="불편부위" 
                name="treatment_area" 
                value={formData.treatment_area} 
                onChange={handleChange}
                type="select"
                placeholder="불편하신 부위를 선택해주세요"
              >
                <option value="">선택하세요</option>
                <option value="앞니">앞니</option>
                <option value="어금니">어금니</option>
                <option value="오른쪽 위 어금니">오른쪽 위 어금니</option>
                <option value="오른쪽 아래 어금니">오른쪽 아래 어금니</option>
                <option value="왼쪽 위 어금니">왼쪽 위 어금니</option>
                <option value="왼쪽 아래 어금니">왼쪽 아래 어금니</option>
                <option value="사랑니">사랑니</option>
                <option value="잇몸">잇몸</option>
                <option value="턱관절">턱관절</option>
                <option value="입천장">입천장</option>
                <option value="혀">혀</option>
                <option value="치아 전체">치아 전체</option>
                <option value="기타">기타</option>
              </InputField>
            </div>
            <div>
              <InputField 
                label="내원경로" 
                name="referral_source" 
                value={formData.referral_source} 
                onChange={handleChange} 
                type="select"
              >
                <option value="">선택하세요</option>
                <option value="인터넷 검색">인터넷 검색</option>
                <option value="SNS">SNS</option>
                <option value="지인 소개">지인 소개</option>
                <option value="가까운 위치">가까운 위치</option>
                <option value="간판/현수막">간판/현수막</option>
                <option value="광고">광고</option>
                <option value="기타">기타</option>
              </InputField>
            </div>
            <div>
              <InputField 
                label="최근방문" 
                name="last_visit" 
                value={formData.last_visit} 
                onChange={handleChange}
                type="select"
              >
                <option value="">선택하세요</option>
                <option value="6개월 이내">6개월 이내</option>
                <option value="6개월~1년">6개월~1년</option>
                <option value="1년~2년">1년~2년</option>
                <option value="2년~5년">2년~5년</option>
                <option value="5년 이상">5년 이상</option>
                <option value="처음 방문">처음 방문</option>
              </InputField>
            </div>
          </div>
        </>
      )
    },
    {
      title: "소개자 정보",
      fields: (
        <>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <InputField 
                label="소개자 이름" 
                name="referrer_name" 
                value={formData.referrer_name} 
                onChange={handleChange}
              />
            </div>
            <div>
              <InputField 
                label="소개자 연락처" 
                name="referrer_phone" 
                value={formData.referrer_phone} 
                onChange={handleChange}
                placeholder="010-1234-5678"
                error={validationErrors.referrer_phone}
              />
            </div>
            <div>
              <InputField 
                label="소개자 생년" 
                name="referrer_birth_year" 
                value={formData.referrer_birth_year} 
                onChange={handleChange}
                placeholder="예: 1985"
              />
            </div>
          </div>
        </>
      )
    },
    {
      title: "복용 중인 약물",
      fields: (
        <>
          <div className="grid grid-cols-1 gap-4">
            <div>
              <h3 className="text-xl font-bold mb-4">복용 중인 약물 선택</h3>
              <p className="mb-2 text-gray-600">해당하는 약물을 모두 선택할 수 있습니다</p>
              <div className="mb-4">
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                  {[
                    { value: "복용 약물 없음", label: "복용 약물 없음" },
                    { value: "아스피린/항응고제", label: "아스피린/항응고제" },
                    { value: "골다공증약", label: "골다공증약" },
                    { value: "혈압약", label: "혈압약" },
                    { value: "당뇨약", label: "당뇨약" },
                    { value: "스테로이드", label: "스테로이드" },
                    { value: "혈전방지제", label: "혈전방지제" },
                    { value: "기타", label: "기타" }
                  ].map(option => {
                    const selectedValues = formData.medications ? formData.medications.split(',').map(item => item.trim()).filter(Boolean) : [];
                    const isSelected = selectedValues.includes(option.value);
                    
                    return (
                      <button
                        key={option.value}
                        type="button"
                        className={`p-3 border rounded text-left text-lg ${
                          isSelected
                            ? 'bg-blue-500 text-white border-blue-600'
                            : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-100'
                        }`}
                        onClick={() => {
                          let newSelected = [...selectedValues];
                          
                          if (option.value === "복용 약물 없음") {
                            // "없음" 옵션 선택 시 다른 모든 옵션 해제
                            newSelected = isSelected ? [] : [option.value];
                          } else {
                            // 이미 "없음" 옵션이 선택되어 있다면 해제
                            if (selectedValues.includes("복용 약물 없음")) {
                              newSelected = [];
                            }
                            
                            if (isSelected) {
                              // 이미 선택된 옵션이면 제거
                              newSelected = newSelected.filter(item => item !== option.value);
                            } else {
                              // 선택되지 않은 옵션이면 추가
                              newSelected.push(option.value);
                            }
                          }
                          
                          handleMultiSelect("medications", newSelected);
                        }}
                      >
                        {option.label}
                      </button>
                    );
                  })}
                </div>
              </div>
            </div>
            <div className="text-sm">
              <InputField 
                label="기타 약물" 
                name="other_medication" 
                value={formData.other_medication} 
                onChange={handleChange}
                disabled={!formData.medications?.includes('기타')}
              />
            </div>
          </div>
        </>
      )
    },
    {
      title: "질환",
      fields: (
        <>
          <div className="grid grid-cols-1 gap-4">
            <div>
              <h3 className="text-xl font-bold mb-4">질환 선택</h3>
              <p className="mb-2 text-gray-600">해당하는 질환을 모두 선택할 수 있습니다</p>
              <div className="mb-4">
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                  {[
                    { value: "해당사항 없음", label: "해당사항 없음" },
                    { value: "고혈압", label: "고혈압" },
                    { value: "당뇨", label: "당뇨" },
                    { value: "심장질환", label: "심장질환" },
                    { value: "뇌졸중", label: "뇌졸중" },
                    { value: "간질환", label: "간질환" },
                    { value: "신장질환", label: "신장질환" },
                    { value: "갑상선질환", label: "갑상선질환" },
                    { value: "암", label: "암" },
                    { value: "기타", label: "기타" }
                  ].map(option => {
                    const selectedValues = formData.medical_conditions ? formData.medical_conditions.split(',').map(item => item.trim()).filter(Boolean) : [];
                    const isSelected = selectedValues.includes(option.value);
                    
                    return (
                      <button
                        key={option.value}
                        type="button"
                        className={`p-3 border rounded text-left text-lg ${
                          isSelected
                            ? 'bg-blue-500 text-white border-blue-600'
                            : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-100'
                        }`}
                        onClick={() => {
                          let newSelected = [...selectedValues];
                          
                          if (option.value === "해당사항 없음") {
                            // "없음" 옵션 선택 시 다른 모든 옵션 해제
                            newSelected = isSelected ? [] : [option.value];
                          } else {
                            // 이미 "없음" 옵션이 선택되어 있다면 해제
                            if (selectedValues.includes("해당사항 없음")) {
                              newSelected = [];
                            }
                            
                            if (isSelected) {
                              // 이미 선택된 옵션이면 제거
                              newSelected = newSelected.filter(item => item !== option.value);
                            } else {
                              // 선택되지 않은 옵션이면 추가
                              newSelected.push(option.value);
                            }
                          }
                          
                          handleMultiSelect("medical_conditions", newSelected);
                        }}
                      >
                        {option.label}
                      </button>
                    );
                  })}
                </div>
              </div>
            </div>
            <div className="text-sm">
              <InputField 
                label="기타 질환" 
                name="other_condition" 
                value={formData.other_condition} 
                onChange={handleChange}
                disabled={!formData.medical_conditions?.includes('기타')}
              />
            </div>
          </div>
        </>
      )
    },
    {
      title: "알레르기",
      fields: (
        <>
          <div className="grid grid-cols-1 gap-4">
            <div>
              <h3 className="text-xl font-bold mb-4">알레르기 선택</h3>
              <p className="mb-2 text-gray-600">해당하는 알레르기를 모두 선택할 수 있습니다</p>
              <div className="mb-4">
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                  {[
                    { value: "알러지 없음", label: "알러지 없음" },
                    { value: "페니실린", label: "페니실린" },
                    { value: "항생제", label: "항생제" },
                    { value: "마취제", label: "마취제" },
                    { value: "라텍스", label: "라텍스" },
                    { value: "금속", label: "금속" },
                    { value: "기타", label: "기타" }
                  ].map(option => {
                    const selectedValues = formData.allergies ? formData.allergies.split(',').map(item => item.trim()).filter(Boolean) : [];
                    const isSelected = selectedValues.includes(option.value);
                    
                    return (
                      <button
                        key={option.value}
                        type="button"
                        className={`p-3 border rounded text-left text-lg ${
                          isSelected
                            ? 'bg-blue-500 text-white border-blue-600'
                            : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-100'
                        }`}
                        onClick={() => {
                          let newSelected = [...selectedValues];
                          
                          if (option.value === "알러지 없음") {
                            // "없음" 옵션 선택 시 다른 모든 옵션 해제
                            newSelected = isSelected ? [] : [option.value];
                          } else {
                            // 이미 "없음" 옵션이 선택되어 있다면 해제
                            if (selectedValues.includes("알러지 없음")) {
                              newSelected = [];
                            }
                            
                            if (isSelected) {
                              // 이미 선택된 옵션이면 제거
                              newSelected = newSelected.filter(item => item !== option.value);
                            } else {
                              // 선택되지 않은 옵션이면 추가
                              newSelected.push(option.value);
                            }
                          }
                          
                          handleMultiSelect("allergies", newSelected);
                        }}
                      >
                        {option.label}
                      </button>
                    );
                  })}
                </div>
              </div>
            </div>
            <div className="text-sm">
              <InputField 
                label="기타 알레르기"
                name="other_allergy"
                value={formData.other_allergy || ''}
                onChange={handleChange}
                placeholder="기타 알레르기가 있다면 입력해주세요"
                disabled={!formData.allergies || !formData.allergies.includes('기타')}
              />
            </div>
          </div>
        </>
      )
    },
    {
      title: "임신/수유",
      fields: (
        <>
          <div className="grid grid-cols-1 gap-4">
            <div>
              <h3 className="text-xl font-bold mb-4">임신/수유 상태</h3>
              <p className="mb-2 text-gray-600">임신 또는 수유 중인 경우를 선택해주세요</p>
              <div className="mb-4">
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                  {[
                    { value: "없음", label: "없음" },
                    { value: "임신 중", label: "임신 중" },
                    { value: "수유 중", label: "수유 중" },
                    { value: "임신 및 수유 중", label: "임신 및 수유 중" }
                  ].map(option => {
                    const selectedValues = formData.pregnancy_status ? formData.pregnancy_status.split(',').map(item => item.trim()).filter(Boolean) : [];
                    const isSelected = selectedValues.includes(option.value);
                    
                    return (
                      <button
                        key={option.value}
                        type="button"
                        className={`p-3 border rounded text-left text-lg ${
                          isSelected
                            ? 'bg-blue-500 text-white border-blue-600'
                            : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-100'
                        }`}
                        onClick={() => {
                          let newSelected = [...selectedValues];
                          
                          if (option.value === "없음") {
                            // "없음" 옵션 선택 시 다른 모든 옵션 해제
                            newSelected = isSelected ? [] : [option.value];
                          } else {
                            // 이미 "없음" 옵션이 선택되어 있다면 해제
                            if (selectedValues.includes("없음")) {
                              newSelected = [];
                            }
                            
                            if (isSelected) {
                              // 이미 선택된 옵션이면 제거
                              newSelected = newSelected.filter(item => item !== option.value);
                            } else {
                              // 선택되지 않은 옵션이면 추가
                              newSelected.push(option.value);
                            }
                          }
                          
                          handleMultiSelect("pregnancy_status", newSelected);
                        }}
                      >
                        {option.label}
                      </button>
                    );
                  })}
                </div>
              </div>
            </div>
            <div>
              <h3 className="text-xl font-bold mb-4">임신 주차</h3>
              <p className="mb-2 text-gray-600">임신 중인 경우 임신 주차를 입력해주세요</p>
              <div className="mb-4">
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                  {[
                    { value: "1주 미만", label: "1주 미만" },
                    { value: "1주~2주", label: "1주~2주" },
                    { value: "2주~3주", label: "2주~3주" },
                    { value: "3주~4주", label: "3주~4주" },
                    { value: "4주~5주", label: "4주~5주" },
                    { value: "5주~6주", label: "5주~6주" },
                    { value: "6주~7주", label: "6주~7주" },
                    { value: "7주~8주", label: "7주~8주" },
                    { value: "8주~9주", label: "8주~9주" },
                    { value: "9주~10주", label: "9주~10주" },
                    { value: "10주~11주", label: "10주~11주" },
                    { value: "11주~12주", label: "11주~12주" },
                    { value: "12주~13주", label: "12주~13주" },
                    { value: "13주~14주", label: "13주~14주" },
                    { value: "14주~15주", label: "14주~15주" },
                    { value: "15주~16주", label: "15주~16주" },
                    { value: "16주~17주", label: "16주~17주" },
                    { value: "17주~18주", label: "17주~18주" },
                    { value: "18주~19주", label: "18주~19주" },
                    { value: "19주~20주", label: "19주~20주" },
                    { value: "20주~21주", label: "20주~21주" },
                    { value: "21주~22주", label: "21주~22주" },
                    { value: "22주~23주", label: "22주~23주" },
                    { value: "23주~24주", label: "23주~24주" },
                    { value: "24주~25주", label: "24주~25주" },
                    { value: "25주~26주", label: "25주~26주" },
                    { value: "26주~27주", label: "26주~27주" },
                    { value: "27주~28주", label: "27주~28주" },
                    { value: "28주~29주", label: "28주~29주" },
                    { value: "29주~30주", label: "29주~30주" },
                    { value: "30주~31주", label: "30주~31주" },
                    { value: "31주~32주", label: "31주~32주" },
                    { value: "32주~33주", label: "32주~33주" },
                    { value: "33주~34주", label: "33주~34주" },
                    { value: "34주~35주", label: "34주~35주" },
                    { value: "35주~36주", label: "35주~36주" },
                    { value: "36주~37주", label: "36주~37주" },
                    { value: "37주~38주", label: "37주~38주" },
                    { value: "38주~39주", label: "38주~39주" },
                    { value: "39주~40주", label: "39주~40주" },
                    { value: "40주~41주", label: "40주~41주" },
                    { value: "41주~42주", label: "41주~42주" },
                    { value: "42주~43주", label: "42주~43주" },
                    { value: "43주~44주", label: "43주~44주" },
                    { value: "44주~45주", label: "44주~45주" },
                    { value: "45주~46주", label: "45주~46주" },
                    { value: "46주~47주", label: "46주~47주" },
                    { value: "47주~48주", label: "47주~48주" },
                    { value: "48주~49주", label: "48주~49주" },
                    { value: "49주~50주", label: "49주~50주" },
                    { value: "50주~51주", label: "50주~51주" },
                    { value: "51주~52주", label: "51주~52주" },
                    { value: "52주~53주", label: "52주~53주" },
                    { value: "53주~54주", label: "53주~54주" },
                    { value: "54주~55주", label: "54주~55주" },
                    { value: "55주~56주", label: "55주~56주" },
                    { value: "56주~57주", label: "56주~57주" },
                    { value: "57주~58주", label: "57주~58주" },
                    { value: "58주~59주", label: "58주~59주" },
                    { value: "59주~60주", label: "59주~60주" },
                    { value: "60주~61주", label: "60주~61주" },
                    { value: "61주~62주", label: "61주~62주" },
                    { value: "62주~63주", label: "62주~63주" },
                    { value: "63주~64주", label: "63주~64주" },
                    { value: "64주~65주", label: "64주~65주" },
                    { value: "65주~66주", label: "65주~66주" },
                    { value: "66주~67주", label: "66주~67주" },
                    { value: "67주~68주", label: "67주~68주" },
                    { value: "68주~69주", label: "68주~69주" },
                    { value: "69주~70주", label: "69주~70주" },
                    { value: "70주~71주", label: "70주~71주" },
                    { value: "71주~72주", label: "71주~72주" },
                    { value: "72주~73주", label: "72주~73주" },
                    { value: "73주~74주", label: "73주~74주" },
                    { value: "74주~75주", label: "74주~75주" },
                    { value: "75주~76주", label: "75주~76주" },
                    { value: "76주~77주", label: "76주~77주" },
                    { value: "77주~78주", label: "77주~78주" },
                    { value: "78주~79주", label: "78주~79주" },
                    { value: "79주~80주", label: "79주~80주" },
                    { value: "80주~81주", label: "80주~81주" },
                    { value: "81주~82주", label: "81주~82주" },
                    { value: "82주~83주", label: "82주~83주" },
                    { value: "83주~84주", label: "83주~84주" },
                    { value: "84주~85주", label: "84주~85주" },
                    { value: "85주~86주", label: "85주~86주" },
                    { value: "86주~87주", label: "86주~87주" },
                    { value: "87주~88주", label: "87주~88주" },
                    { value: "88주~89주", label: "88주~89주" },
                    { value: "89주~90주", label: "89주~90주" },
                    { value: "90주~91주", label: "90주~91주" },
                    { value: "91주~92주", label: "91주~92주" },
                    { value: "92주~93주", label: "92주~93주" },
                    { value: "93주~94주", label: "93주~94주" },
                    { value: "94주~95주", label: "94주~95주" },
                    { value: "95주~96주", label: "95주~96주" },
                    { value: "96주~97주", label: "96주~97주" },
                    { value: "97주~98주", label: "97주~98주" },
                    { value: "98주~99주", label: "98주~99주" },
                    { value: "99주~100주", label: "99주~100주" },
                    { value: "100주~101주", label: "100주~101주" },
                    { value: "101주~102주", label: "101주~102주" },
                    { value: "102주~103주", label: "102주~103주" },
                    { value: "103주~104주", label: "103주~104주" },
                    { value: "104주~105주", label: "104주~105주" },
                    { value: "105주~106주", label: "105주~106주" },
                    { value: "106주~107주", label: "106주~107주" },
                    { value: "107주~108주", label: "107주~108주" },
                    { value: "108주~109주", label: "108주~109주" },
                    { value: "109주~110주", label: "109주~110주" },
                    { value: "110주~111주", label: "110주~111주" },
                    { value: "111주~112주", label: "111주~112주" },
                    { value: "112주~113주", label: "112주~113주" },
                    { value: "113주~114주", label: "113주~114주" },
                    { value: "114주~115주", label: "114주~115주" },
                    { value: "115주~116주", label: "115주~116주" },
                    { value: "116주~117주", label: "116주~117주" },
                    { value: "117주~118주", label: "117주~118주" },
                    { value: "118주~119주", label: "118주~119주" },
                    { value: "119주~120주", label: "119주~120주" },
                    { value: "120주~121주", label: "120주~121주" },
                    { value: "121주~122주", label: "121주~122주" },
                    { value: "122주~123주", label: "122주~123주" },
                    { value: "123주~124주", label: "123주~124주" },
                    { value: "124주~125주", label: "124주~125주" },
                    { value: "125주~126주", label: "125주~126주" },
                    { value: "126주~127주", label: "126주~127주" },
                    { value: "127주~128주", label: "127주~128주" },
                    { value: "128주~129주", label: "128주~129주" },
                    { value: "129주~130주", label: "129주~130주" },
                    { value: "130주~131주", label: "130주~131주" },
                    { value: "131주~132주", label: "131주~132주" },
                    { value: "132주~133주", label: "132주~133주" },
                    { value: "133주~134주", label: "133주~134주" },
                    { value: "134주~135주", label: "134주~135주" },
                    { value: "135주~136주", label: "135주~136주" },
                    { value: "136주~137주", label: "136주~137주" },
                    { value: "137주~138주", label: "137주~138주" },
                    { value: "138주~139주", label: "138주~139주" },
                    { value: "139주~140주", label: "139주~140주" },
                    { value: "140주~141주", label: "140주~141주" },
                    { value: "141주~142주", label: "141주~142주" },
                    { value: "142주~143주", label: "142주~143주" },
                    { value: "143주~144주", label: "143주~144주" },
                    { value: "144주~145주", label: "144주~145주" },
                    { value: "145주~146주", label: "145주~146주" },
                    { value: "146주~147주", label: "146주~147주" },
                    { value: "147주~148주", label: "147주~148주" },
                    { value: "148주~149주", label: "148주~149주" },
                    { value: "149주~150주", label: "149주~150주" },
                    { value: "150주~151주", label: "150주~151주" },
                    { value: "151주~152주", label: "151주~152주" },
                    { value: "152주~153주", label: "152주~153주" },
                    { value: "153주~154주", label: "153주~154주" },
                    { value: "154주~155주", label: "154주~155주" },
                    { value: "155주~156주", label: "155주~156주" },
                    { value: "156주~157주", label: "156주~157주" },
                    { value: "157주~158주", label: "157주~158주" },
                    { value: "158주~159주", label: "158주~159주" },
                    { value: "159주~160주", label: "159주~160주" },
                    { value: "160주~161주", label: "160주~161주" },
                    { value: "161주~162주", label: "161주~162주" },
                    { value: "162주~163주", label: "162주~163주" },
                    { value: "163주~164주", label: "163주~164주" },
                    { value: "164주~165주", label: "164주~165주" },
                    { value: "165주~166주", label: "165주~166주" },
                    { value: "166주~167주", label: "166주~167주" },
                    { value: "167주~168주", label: "167주~168주" },
                    { value: "168주~169주", label: "168주~169주" },
                    { value: "169주~170주", label: "169주~170주" },
                    { value: "170주~171주", label: "170주~171주" },
                    { value: "171주~172주", label: "171주~172주" },
                    { value: "172주~173주", label: "172주~173주" },
                    { value: "173주~174주", label: "173주~174주" },
                    { value: "174주~175주", label: "174주~175주" },
                    { value: "175주~176주", label: "175주~176주" },
                    { value: "176주~177주", label: "176주~177주" },
                    { value: "177주~178주", label: "177주~178주" },
                    { value: "178주~179주", label: "178주~179주" },
                    { value: "179주~180주", label: "179주~180주" },
                    { value: "180주~181주", label: "180주~181주" },
                    { value: "181주~182주", label: "181주~182주" },
                    { value: "182주~183주", label: "182주~183주" },
                    { value: "183주~184주", label: "183주~184주" },
                    { value: "184주~185주", label: "184주~185주" },
                    { value: "185주~186주", label: "185주~186주" },
                    { value: "186주~187주", label: "186주~187주" },
                    { value: "187주~188주", label: "187주~188주" },
                    { value: "188주~189주", label: "188주~189주" },
                    { value: "189주~190주", label: "189주~190주" },
                    { value: "190주~191주", label: "190주~191주" },
                    { value: "191주~192주", label: "191주~192주" },
                    { value: "192주~193주", label: "192주~193주" },
                    { value: "193주~194주", label: "193주~194주" },
                    { value: "194주~195주", label: "194주~195주" },
                    { value: "195주~196주", label: "195주~196주" },
                    { value: "196주~197주", label: "196주~197주" },
                    { value: "197주~198주", label: "197주~198주" },
                    { value: "198주~199주", label: "198주~199주" },
                    { value: "199주~200주", label: "199주~200주" },
                    { value: "200주~201주", label: "200주~201주" },
                    { value: "201주~202주", label: "201주~202주" },
                    { value: "202주~203주", label: "202주~203주" },
                    { value: "203주~204주", label: "203주~204주" },
                    { value: "204주~205주", label: "204주~205주" },
                    { value: "205주~206주", label: "205주~206주" },
                    { value: "206주~207주", label: "206주~207주" },
                    { value: "207주~208주", label: "207주~208주" },
                    { value: "208주~209주", label: "208주~209주" },
                    { value: "209주~210주", label: "209주~210주" },
                    { value: "210주~211주", label: "210주~211주" },
        </div>
      );
    } else {
      // 접힌 상태: 중요 정보 요약
      const summary = [];
      if (medications !== '-') summary.push(`약물: ${medications.substring(0, 10)}${medications.length > 10 ? '...' : ''}`);
      if (conditions !== '-') summary.push(`질환: ${conditions.substring(0, 10)}${conditions.length > 10 ? '...' : ''}`);
      if (allergies !== '-') summary.push(`알레르기: ${allergies.substring(0, 10)}${allergies.length > 10 ? '...' : ''}`);
      
      const displaySummary = summary.length > 0 ? summary[0] : (otherMedication !== '-' ? `기타약물: ${otherMedication.substring(0, 10)}...` : '병력 있음');
      
      return (
        <div 
          className="cursor-pointer hover:text-blue-500"
          onClick={(e) => {
            e.stopPropagation();
            setExpandedMedicalHistories(prev => ({
              ...prev,
              [`medical-${index}`]: true
            }));
          }}
          title="펼쳐서 모든 정보 보기"
        >
          <div className="flex flex-col">
            <span>{displaySummary}</span>
            <span className="text-sm text-gray-500">더보기 <span className="text-blue-500 text-sm">▼</span></span>
          </div>
        </div>
      );
    }
  };

  // 임신/흡연 정보 묶음 표시 함수
  const renderPregnancySmoking = (item: PatientQuestionnaire, index: number) => {
    const pregnancyStatus = item.pregnancy_status || '-';
    const pregnancyWeek = item.pregnancy_week || '-';
    const smokingStatus = item.smoking_status || '-';
    const smokingAmount = item.smoking_amount || '-';
    
    // 모든 값이 '-'인 경우 '-' 반환
    if ([pregnancyStatus, pregnancyWeek, smokingStatus, smokingAmount].every(val => val === '-')) {
      return '-';
    }
    
    const isExpanded = expandedPregnancySmoking[`pregnancy-smoking-${index}`] || false;
    
    if (isExpanded) {
      // 펼쳐진 상태
      return (
        <div 
          className="cursor-pointer"
          onClick={(e) => {
            e.stopPropagation();
            setExpandedPregnancySmoking(prev => ({
              ...prev,
              [`pregnancy-smoking-${index}`]: false
            }));
          }}
          title="접기"
        >
          <div className="flex flex-col">
            {pregnancyStatus !== '-' && <div><strong>임신상태:</strong> {pregnancyStatus}</div>}
            {pregnancyWeek !== '-' && <div><strong>임신주차:</strong> {pregnancyWeek}</div>}
            {smokingStatus !== '-' && <div><strong>흡연여부:</strong> {smokingStatus}</div>}
            {smokingAmount !== '-' && <div><strong>흡연량:</strong> {smokingAmount}</div>}
            <span className="text-blue-500 mt-1">▲ 접기</span>
          </div>
        </div>
      );
    } else {
      // 접힌 상태: 중요 정보 하나만 요약
      let summary = '';
      
      // 임신 정보가 있으면 임신 정보를 우선적으로 표시
      if (pregnancyStatus !== '-' && pregnancyStatus !== '없음') {
        summary = `임신: ${pregnancyStatus}`;
      } 
      // 임신 정보가 없고 흡연 정보가 있으면 흡연 정보 표시
      else if (smokingStatus !== '-' && smokingStatus !== '없음') {
        summary = `흡연: ${smokingStatus}`;
      }
      // 그 외의 경우 어떤 정보든 있는 것 표시
      else {
        summary = pregnancyStatus !== '-' ? pregnancyStatus : smokingStatus;
      }
      
      return (
        <div 
          className="cursor-pointer hover:text-blue-500"
          onClick={(e) => {
            e.stopPropagation();
            setExpandedPregnancySmoking(prev => ({
              ...prev,
              [`pregnancy-smoking-${index}`]: true
            }));
          }}
          title="펼쳐서 모든 정보 보기"
        >
          <div className="flex flex-col">
            <span>{summary}</span>
            <span className="text-sm text-gray-500">더보기 <span className="text-blue-500 text-sm">▼</span></span>
          </div>
        </div>
      );
    }
  };

  // 비상연락처 정보 묶음 표시 함수
  const renderEmergencyContact = (item: PatientQuestionnaire, index: number) => {
    const name = item.emergency_contact_name || '-';
    const relation = item.emergency_contact_relation || '-';
    const phone = item.emergency_contact_phone || '-';
    
    // 모든 값이 '-'인 경우 '-' 반환
    if ([name, relation, phone].every(val => val === '-')) {
      return '-';
    }
    
    const isExpanded = expandedEmergencyContacts[`emergency-${index}`] || false;
    
    if (isExpanded) {
      // 펼쳐진 상태
      return (
        <div 
          className="cursor-pointer"
          onClick={(e) => {
            e.stopPropagation();
            setExpandedEmergencyContacts(prev => ({
              ...prev,
              [`emergency-${index}`]: false
            }));
          }}
          title="접기"
        >
          <div className="flex flex-col">
            {name !== '-' && <div><strong>이름:</strong> {name}</div>}
            {relation !== '-' && <div><strong>관계:</strong> {relation}</div>}
            {phone !== '-' && <div><strong>연락처:</strong> {phone}</div>}
            <span className="text-blue-500 mt-1">▲ 접기</span>
          </div>
        </div>
      );
    } else {
      // 접힌 상태: 이름만 표시
      const summary = name !== '-' ? name : '비상연락처 있음';
      
      return (
        <div 
          className="cursor-pointer hover:text-blue-500"
          onClick={(e) => {
            e.stopPropagation();
            setExpandedEmergencyContacts(prev => ({
              ...prev,
              [`emergency-${index}`]: true
            }));
          }}
          title="펼쳐서 모든 정보 보기"
        >
          <div className="flex flex-col">
            <span>{summary}</span>
            <span className="text-sm text-gray-500">더보기 <span className="text-blue-500 text-sm">▼</span></span>
          </div>
        </div>
      );
    }
  };

  // 치아보험 정보 묶음 표시 함수
  const renderInsurance = (item: PatientQuestionnaire, index: number) => {
    const hasInsurance = renderBoolean(item.has_private_insurance);
    const period = renderInsurancePeriod(item.private_insurance_period);
    const company = renderInsuranceCompany(item.insurance_company);
    
    // 모든 값이 '-'인 경우 또는 보험가입이 '아니오'인 경우 간단 표시
    if ((hasInsurance === '-' || hasInsurance === '아니오') && period === '-' && company === '-') {
      return hasInsurance === '아니오' ? '미가입' : '-';
    }
    
    const isExpanded = expandedInsurance[`insurance-${index}`] || false;
    
    if (isExpanded) {
      // 펼쳐진 상태
      return (
        <div 
          className="cursor-pointer"
          onClick={(e) => {
            e.stopPropagation();
            setExpandedInsurance(prev => ({
              ...prev,
              [`insurance-${index}`]: false
            }));
          }}
          title="접기"
        >
          <div className="flex flex-col">
            <div><strong>가입여부:</strong> {hasInsurance}</div>
            {period !== '-' && <div><strong>보험기간:</strong> {period}</div>}
            {company !== '-' && <div><strong>보험회사:</strong> {company}</div>}
            <span className="text-blue-500 mt-1">▲ 접기</span>
          </div>
        </div>
      );
    } else {
      // 접힌 상태: 중요 정보 하나만 요약
      let summary = '';
      
      // 보험 가입 상태가 '예'일 경우 보험회사 표시, 없으면 보험기간, 둘 다 없으면 가입여부 표시
      if (hasInsurance === '예') {
        if (company !== '-') {
          summary = company;
        } else if (period !== '-') {
          summary = period;
        } else {
          summary = '가입';
        }
      } else {
        summary = hasInsurance;
      }
      
      return (
        <div 
          className="cursor-pointer hover:text-blue-500"
          onClick={(e) => {
            e.stopPropagation();
            setExpandedInsurance(prev => ({
              ...prev,
              [`insurance-${index}`]: true
            }));
          }}
          title="펼쳐서 모든 정보 보기"
        >
          <div className="flex flex-col">
            <span>{summary}</span>
            {hasInsurance === '예' && (company !== '-' || period !== '-') && 
              <span className="text-sm text-gray-500">더보기 <span className="text-blue-500 text-sm">▼</span></span>
            }
          </div>
        </div>
      );
    }
  };

  // 테이블에 보여줄 데이터 필터링 및 정렬
  const filteredAndSortedData = useMemo(() => {
    // 검색어로 필터링
    let filtered = questionnaires.filter(item => {
      const searchableValues = [
        item.name, 
        item.phone, 
        item.resident_id,
        item.address,
        item.emergency_contact_name,
        item.emergency_contact_phone,
        item.visit_reason, 
        item.treatment_area,
        item.referral_source,
        item.referrer_name,
        item.referrer_phone,
        item.medical_conditions,
        item.allergies,
        item.medications,
        item.dental_fears,
        item.additional_info
      ].filter(Boolean);
      
      const searchableText = searchableValues.join(' ').toLowerCase();
      
      // 날짜 필터링
      let passDateFilter = true;
      
      // 시작 날짜 또는 종료 날짜가 설정된 경우에만 필터링 적용
      if (startDate || endDate) {
        const startDateObj = startDate ? new Date(startDate) : null;
        const endDateObj = endDate ? new Date(endDate) : null;
        
        if (startDateObj) startDateObj.setHours(0, 0, 0, 0);
        if (endDateObj) endDateObj.setHours(23, 59, 59, 999);
        
        passDateFilter = false;
        
        // submitted_at 날짜 확인
        if (item.submitted_at) {
          const date = new Date(item.submitted_at);
          const koreanDate = new Date(date.getTime() + (9 * 60 * 60 * 1000));
          
          const isAfterStart = !startDateObj || koreanDate >= startDateObj;
          const isBeforeEnd = !endDateObj || koreanDate <= endDateObj;
          
          if (isAfterStart && isBeforeEnd) {
            passDateFilter = true;
          }
        }
        
        // created_at 날짜 확인 (submitted_at이 없거나 일치하지 않을 경우)
        if (!passDateFilter && item.created_at) {
          const date = new Date(item.created_at);
          const koreanDate = new Date(date.getTime() + (9 * 60 * 60 * 1000));
          
          const isAfterStart = !startDateObj || koreanDate >= startDateObj;
          const isBeforeEnd = !endDateObj || koreanDate <= endDateObj;
          
          if (isAfterStart && isBeforeEnd) {
            passDateFilter = true;
          }
        }
      }
      
      return searchableText.includes(filterText.toLowerCase()) && passDateFilter;
    });
    
    // 정렬
    return [...filtered].sort((a, b) => {
      const aValue = a[sortField];
      const bValue = b[sortField];
      
      // null, undefined 처리
      if (aValue === null || aValue === undefined) return sortOrder === 'asc' ? -1 : 1;
      if (bValue === null || bValue === undefined) return sortOrder === 'asc' ? 1 : -1;
      
      // 문자열 비교
      if (typeof aValue === 'string' && typeof bValue === 'string') {
        return sortOrder === 'asc' 
          ? aValue.localeCompare(bValue) 
          : bValue.localeCompare(aValue);
      }
      
      // 불리언 비교
      if (typeof aValue === 'boolean' && typeof bValue === 'boolean') {
        return sortOrder === 'asc' 
          ? (aValue === bValue ? 0 : aValue ? 1 : -1)
          : (aValue === bValue ? 0 : aValue ? -1 : 1);
      }
      
      // 그 외 (숫자 등)
      return sortOrder === 'asc' 
        ? (aValue > bValue ? 1 : -1)
        : (aValue > bValue ? -1 : 1);
    });
  }, [questionnaires, filterText, sortField, sortOrder, startDate, endDate]);

  return (
    <div className="app-container">
      {toast && (
        <Toast 
          message={toast.message}
          type={toast.type}
          onClose={() => setToast(null)}
        />
      )}
      
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">샤인치과 환자 관리 프로그램 V1.0 </h1>
        <div className="flex gap-2">
          <button 
            onClick={() => setIsAddModalOpen(true)}
            className="p-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 text-sm"
          >
            환자 정보 추가
          </button>
          <button 
            onClick={addTestData}
            className="p-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 text-sm"
          >
            테스트 데이터 추가
          </button>
          <ThemeToggle />
        </div>
      </div>
      
      {error && <div className="error-message">{error}</div>}
      
      <div className="controls flex flex-wrap gap-2 mb-4">
        {/* 검색 필터 */}
        <div className="filter-container relative flex-1 min-w-[200px] flex flex-col justify-end">
          <div className="mb-2 h-[26px]">
            {/* 상단 여백을 날짜 선택기의 버튼과 동일한 높이로 맞춤 */}
          </div>
          <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4 pointer-events-none" />
          <input
            type="text"
            placeholder="검색어를 입력하세요"
            value={filterText}
            onChange={e => setFilterText(e.target.value)}
            className="filter-input pl-10 w-full py-2 px-3 border border-gray-300 rounded-md dark:bg-gray-800 dark:border-gray-700"
          />
          </div>
        </div>
        
        {/* 날짜 기간 필터 */}
        <div className="date-filter-container flex-1 min-w-[260px] flex flex-col">
          <div className="flex gap-2 mb-2 h-[26px]">
        <button
              onClick={setCurrentMonth}
              className="text-xs bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 px-2 py-1 rounded-md"
              title="이번 달 데이터 보기"
            >
              이번 달
            </button>
            <button
              onClick={setPreviousMonth}
              className="text-xs bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 px-2 py-1 rounded-md"
              title="지난 달 데이터 보기"
            >
              지난 달
            </button>
            {(startDate || endDate) && (
              <button
                onClick={() => { setStartDate(''); setEndDate(''); }}
                className="text-xs bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 px-2 py-1 rounded-md ml-auto"
                title="모든 날짜 필터 초기화"
              >
                초기화
              </button>
            )}
          </div>
          
          <div className="flex gap-2">
            <div className="relative flex-1">
              <input
                type="date"
                value={startDate}
                onChange={e => setStartDate(e.target.value)}
                className="w-full py-2 px-3 border border-gray-300 rounded-md dark:bg-gray-800 dark:border-gray-700 dark:text-white"
                max={endDate || undefined}
                aria-label="시작 날짜 선택"
                placeholder="YYYY-MM-DD"
              />
              {startDate && (
                <button
                  onClick={() => setStartDate('')}
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
                  title="시작 날짜 지우기"
                >
                  ✕
                </button>
              )}
            </div>
            
            <span className="flex items-center text-gray-500">~</span>
            
            <div className="relative flex-1">
              <input
                type="date"
                value={endDate}
                onChange={e => setEndDate(e.target.value)}
                className="w-full py-2 px-3 border border-gray-300 rounded-md dark:bg-gray-800 dark:border-gray-700 dark:text-white"
                min={startDate || undefined}
                aria-label="종료 날짜 선택"
                placeholder="YYYY-MM-DD"
              />
              {endDate && (
                <button
                  onClick={() => setEndDate('')}
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
                  title="종료 날짜 지우기"
                >
                  ✕
                </button>
              )}
            </div>
          </div>
        </div>
        
        {/* 새로고침 버튼 */}
        <div className="flex-none min-w-[100px] flex flex-col justify-end">
          <div className="mb-2 h-[26px]">
            {/* 상단 여백 */}
          </div>
        <button
          onClick={async () => {
            const patientIds = await fetchQuestionnaires();
            if (patientIds && patientIds.length > 0) {
              await fetchConsultationCounts(patientIds);
            }
          }}
          disabled={loading}
            className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded disabled:bg-blue-300 h-[38px]"
          title="새로고침 및 상담 내역 갱신"
        >
          {loading ? (
            <div className="flex items-center">
              <div className="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-2"></div>
              새로고침 중...
            </div>
          ) : '새로고침'}
        </button>
        </div>
      </div>
      
      <div className="text-sm mb-2">
        총 {filteredAndSortedData.length}개 데이터 표시 중 (전체 {questionnaires.length}개)
      </div>
      
      {loading ? (
        <div className="loading-container">
          <div className="loader"></div>
          <p>데이터를 불러오는 중...</p>
        </div>
      ) : (
        <div className="table-container">
          <table>
            <thead>
              <tr>
                <th>동작</th>
                
                {/* 제출시간 */}
                <th onClick={() => handleSort('submitted_at')}>
                  제출시간 {sortField === 'submitted_at' && (sortOrder === 'asc' ? '↑' : '↓')}
                </th>
                <th onClick={() => handleSort('at_clinic')}>
                  내원유무 {sortField === 'at_clinic' && (sortOrder === 'asc' ? '↑' : '↓')}
                </th>
                <th onClick={() => handleSort('name')}>
                  이름 {sortField === 'name' && (sortOrder === 'asc' ? '↑' : '↓')}
                </th>
                <th onClick={() => handleSort('resident_id')}>
                  주민번호 {sortField === 'resident_id' && (sortOrder === 'asc' ? '↑' : '↓')}
                </th>
                <th onClick={() => handleSort('visit_reason')}>
                  내원목적 {sortField === 'visit_reason' && (sortOrder === 'asc' ? '↑' : '↓')}
                </th>
                <th onClick={() => handleSort('treatment_area')}>
                  불편부위 {sortField === 'treatment_area' && (sortOrder === 'asc' ? '↑' : '↓')}
                </th>
                <th onClick={() => handleSort('referral_source')}>
                  내원경로 {sortField === 'referral_source' && (sortOrder === 'asc' ? '↑' : '↓')}
                </th>
                <th onClick={() => handleSort('phone')}>
                  전화번호 {sortField === 'phone' && (sortOrder === 'asc' ? '↑' : '↓')}
                </th>
                <th onClick={() => handleSort('dental_fears')}>
                  치과공포 {sortField === 'dental_fears' && (sortOrder === 'asc' ? '↑' : '↓')}
                </th>
                <th onClick={() => handleSort('has_private_insurance')}>
                  치아보험 {sortField === 'has_private_insurance' && (sortOrder === 'asc' ? '↑' : '↓')}
                </th>
                <th onClick={() => handleSort('gender')}>
                  성별 {sortField === 'gender' && (sortOrder === 'asc' ? '↑' : '↓')}
                </th>
                <th onClick={() => handleSort('address')}>
                  주소 {sortField === 'address' && (sortOrder === 'asc' ? '↑' : '↓')}
                </th>
                <th onClick={() => handleSort('referrer_name')}>
                  소개자 {sortField === 'referrer_name' && (sortOrder === 'asc' ? '↑' : '↓')}
                </th>
                <th onClick={() => handleSort('medical_conditions')}>
                  PMH {sortField === 'medical_conditions' && (sortOrder === 'asc' ? '↑' : '↓')}
                </th>
                <th onClick={() => handleSort('pregnancy_status')}>
                  임신/흡연 {sortField === 'pregnancy_status' && (sortOrder === 'asc' ? '↑' : '↓')}
                </th>
                <th onClick={() => handleSort('emergency_contact_name')}>
                  비상연락처 {sortField === 'emergency_contact_name' && (sortOrder === 'asc' ? '↑' : '↓')}
                </th>
                <th onClick={() => handleSort('last_visit')}>
                  최근방문 {sortField === 'last_visit' && (sortOrder === 'asc' ? '↑' : '↓')}
                </th>
                <th onClick={() => handleSort('consent')}>
                  정보동의 {sortField === 'consent' && (sortOrder === 'asc' ? '↑' : '↓')}
                </th>
                <th onClick={() => handleSort('additional_info')}>
                  부가정보 {sortField === 'additional_info' && (sortOrder === 'asc' ? '↑' : '↓')}
                </th>
              </tr>
            </thead>
            <tbody>
              {filteredAndSortedData.length > 0 ? (
                filteredAndSortedData.map((item, index) => (
                  <tr key={index} className="group hover:bg-accent/50">
                    <td className="sticky left-0 bg-background group-hover:bg-accent/50 text-center">
                      <div className="flex flex-col gap-1">
                        <Link
                          to={`/consultation/${item.resident_id}`}
                          className="bg-blue-500 hover:bg-blue-600 text-white p-1 rounded text-sm"
                          aria-label="상담"
                          title="상담 기록 보기/추가"
                        >
                          {consultationCounts[item.resident_id] ? `상담 (${consultationCounts[item.resident_id]}회)` : '상담'}
                        </Link>
                      </div>
                    </td>
                    <td>{renderDateTime(item.submitted_at)}</td>
                    <td>{renderBoolean(item.at_clinic)}</td>
                    <td>{item.name || '-'}</td>
                    <td>{item.resident_id || '-'}</td>
                    <td>{item.visit_reason || '-'}</td>
                    <td>{renderTreatmentArea(item.treatment_area, index)}</td>
                    <td>{item.referral_source || '-'}</td>
                    <td>{item.phone || '-'}</td>
                    <td>{item.dental_fears || '-'}</td>
                    <td>{renderInsurance(item, index)}</td>
                    <td>{renderGender(item.gender, item.resident_id)}</td>
                    <td>{renderAddress(item.address, index)}</td>
                    <td>{renderReferrerInfo(item, index)}</td>
                    <td>{renderMedicalHistory(item, index)}</td>
                    <td>{renderPregnancySmoking(item, index)}</td>
                    <td>{renderEmergencyContact(item, index)}</td>
                    <td>{item.last_visit || '-'}</td>
                    <td>{renderBoolean(item.consent)}</td>
                    <td>{renderAdditionalInfo(item.additional_info, index)}</td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan={20} className="text-center py-4">
                    표시할 데이터가 없습니다.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      )}
      
      {/* 환자 정보 추가 모달 */}
      <Modal isOpen={isAddModalOpen} onClose={() => setIsAddModalOpen(false)}>
        <PatientForm 
          onSubmit={addPatientData}
          onCancel={() => setIsAddModalOpen(false)}
        />
      </Modal>
    </div>
  );
}

// 라우터 설정
const router = createBrowserRouter(
  createRoutesFromElements(
    <>
      <Route path="/" element={<PatientQuestionnaireTable />} />
      <Route path="/consultation/:residentId" element={<PatientConsultation />} />
      <Route path="*" element={<Navigate to="/" replace />} />
    </>
  )
);

function App() {
  return (
    <ThemeProvider defaultTheme="light" storageKey="vite-ui-theme">
      <RouterProvider router={router} />
    </ThemeProvider>
  );
}

export default App;
